'''
    힙 : 최댓값 혹은 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 자료구조
    초기에 최대 힙이 비어있을 때에 다음의 2가지 연산을 수행하는 프로그램을 작성하자
    1. 연산 1 - 자연수 x를 삽입
    2. 연산 2 - 최대 힙의 루트 노드의 키값을 출력하고, 해당 노드를 삭제
    ex)
    1. 연산 1 - 3을 삽입
    2. 연산 1 - 5를 삽입
    3. 연산 2 - 최댓값 출력 후 해당 키값 삭제
    -----------------------------------------------------------------------
    최대 키값은 5이기 때문에 5가 출력되고, 5는 삭제되기 때문에 최대 힙에는 3만 남음
    -----------------------------------------------------------------------
    4. 연산 1 - 1을 삽입
    5. 연산 2 - 최댓값 출력 후 해당 키값 삭제
    -----------------------------------------------------------------------
    최대 키값은 3이기 때문에 3이 출력되고, 3은 삭제되기 때문에 최대 힙에는 1만 남음
    -----------------------------------------------------------------------
    만약 가장 큰 키값이 여러 개일 경우에는 삭제할 때 그 키값을 가지는 노드들 전부가 삭제되는 것이 아니라,
    루트 노드 단 하나만 삭제됨
'''
# import sys
import heapq

# sys.stdin = open('sample_input.txt')

T = int(input())        # T : 테스트 케이스 수

for tc in range(1, T+1):
    cnt = int(input())  # cnt : 수행해야하는 연산의 수
    numbers = []
    result = []
    for _ in range(cnt):
        cal_num = list(map(int, input().split()))
        if len(cal_num) == 2:
            heapq.heappush(numbers, -cal_num[1])
        else:
            if len(numbers) > 0:
                largest = -heapq.heappop(numbers)
                result.append(largest)
            else :
                result.append(-1)
    print(f"#{tc} ", end='')
    for num in result:
        print(f"{num} ",end='')
    print()


